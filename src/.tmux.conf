################
# VARIABLES
# TODO: make local, instead of making env variables
################

tmuxConfig="~/.tmux.conf"
tmuxTheme="~/dotfiles/lib/themes/tmuxline.conf"
tmuxPlugins="~/.tmux/plugins"

################
# SETTINGS
################

set -g default-command "$SHELL"
set -g default-shell "$SHELL"
set -g default-terminal "$TERM"

# work around weird pwd bs
set -g default-shell "/usr/bin/bash"

# enable clipboard
set -s set-clipboard on

# use vi mode
set -g mode-keys vi
setw -g xterm-keys on
set -sg escape-time 0

# 0 is far, far away
set -g base-index 1
set -g pane-base-index 1

# directly expose pane titles
set -g set-titles on
set -g set-titles-string "#S: #T"

setw -g monitor-activity on
set -g visual-activity off

# urgency hints
set -g bell-action any

# reindex windows
set -g renumber-windows on

# layouts
set -g main-pane-height 70%
set -g main-pane-width 70%

# focus events for supporting terminals
set -g focus-events on

# only resize shared windows
setw -g aggressive-resize on

# shell vi-mode
set -g @shell_mode "vi"

# üêÄ mice infestation üêÅ
set -g mouse on

set -g history-limit 65536

################
# STATUS
################

if-shell "test -f $tmuxTheme" "source $tmuxTheme"

set -g status-justify left
set -g status-bg colour0
set -g status-fg colour66
set -g status-interval 2

set -g message-style fg=colour0,bg=colour66
set -g message-command-style fg=colour66,bg=colour1

set-option -g status-position bottom
setw -g window-status-format "#[bg=colour241,fg=colour0,noreverse]‚ñà‚ñì‚ñë #W "
setw -g window-status-current-format "#[bg=colour66,fg=colour0,noreverse]‚ñà‚ñì‚ñë #W "

################
# MAPPINGS
################

# PREFIX

set -g prefix C-u
# nested prefix
bind C-u send-prefix
unbind C-B

# APP

bind a switch-client -T APP

# force a reload of the config file
bind -T APP r if-shell "test -f $tmuxConfig" "source $tmuxConfig\; display 'Config reloaded.'"

# SESSIONS

bind s switch-client -T SESSION

bind -T SESSION Space choose-tree

bind -T SESSION n command-prompt -p "New session:" "new-session -A -s %%"
bind -T SESSION N command-prompt -p "New session:" "new-session -A -s %% -t #{session_name}"

bind -T SESSION c confirm kill-session
bind -T SESSION C kill-session

bind -T SESSION d detach
bind -T SESSION D detach -s "#{session_name}"

bind -T SESSION r command-prompt -p "Rename session:" "rename-session %%"

# TABS (windows)

bind t switch-client -T TAB

bind -T TAB Space choose-window

bind -T TAB -r h previous-window
bind -T TAB -r l next-window
bind -r p previous-window
bind -r n next-window

bind -T TAB -r H swap-window -d -t -1
bind -T TAB -r L swap-window -d -t +1
bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1

bind -T TAB n new-window -a -c "#{pane_current_path}"
bind -T TAB p new-window -a -c "#{pane_current_path}" \; swap-window -d -t -1

bind -T TAB c confirm kill-window
bind -T TAB C kill-window

bind -T TAB r command-prompt -p "Rename window:" "rename-window %%"

# BUFFERS (panes)

bind b switch-client -T BUFFER

bind -T BUFFER j split-window -v -c "#{pane_current_path}"
bind -T BUFFER k split-window -v -c "#{pane_current_path}" \; swap-pane -U
bind -T BUFFER h split-window -h -c "#{pane_current_path}" \; swap-pane -U
bind -T BUFFER l split-window -h -c "#{pane_current_path}"

bind -T BUFFER J swap-pane -D
bind -T BUFFER K swap-pane -U
bind -T BUFFER H swap-pane -U
bind -T BUFFER L swap-pane -D

bind -T BUFFER c confirm kill-pane
bind -T BUFFER C kill-pane

bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5

# WINDOWS (panes of tab)

bind w switch-client -T WINDOW

bind -T WINDOW j select-layout even-vertical
bind -T WINDOW k select-layout even-vertical
bind -T WINDOW h select-layout even-horizontal
bind -T WINDOW l select-layout even-horizontal

bind -T WINDOW J select-layout main-vertical
bind -T WINDOW K select-layout main-vertical
bind -T WINDOW H select-layout main-horizontal
bind -T WINDOW L select-layout main-horizontal

bind -T WINDOW Space select-layout tiled

bind -T WINDOW n next-layout
bind -T WINDOW p previous-layout

# sync input
bind -T WINDOW s setw synchronize-panes

# FUZZ

bind f switch-client -T FUZZ

# files
bind -T FUZZ c popup -E "nu -c 'tmux send (fd --type file --hidden --follow | fzf)'"
# dirs
bind -T FUZZ d popup -E "nu -c 'tmux send (fd --type directory --hidden --follow | fzf)'"

# MISC

# same command prompt alias as vim
bind \; command-prompt

# SHELL

# history
bind r popup -E "nu -c 'tmux send (history | reverse | uniq | str collect (char nl) | fzf)'"
bind R popup -E "nu -c 'tmux send (zsh -c 'source ~/.zshrc; fc -R; fc -lrn 1' | fzf)'"
# last arg
bind . run -b "nu -c 'tmux send (history | last | split row (char space) | last)'"

# time
bind T clock-mode

# NAVIGATING

# Smart pane switching with awareness of vim splits
isVim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-j if-shell "$isVim" "send C-j" "select-pane -D"
bind -n C-k if-shell "$isVim" "send C-k" "select-pane -U"
bind -n C-h if-shell "$isVim" "send C-h" "select-pane -L"
bind -n C-l if-shell "$isVim" "send C-l" "select-pane -R"
bind -n C-\\ if-shell "$isVim" "send C-\\" "select-pane -l"

# fallback for weird situations
bind j select-pane -D
bind k select-pane -U
bind h select-pane -L
bind l select-pane -R

bind -n C-M-j send C-j
bind -n C-M-k send C-k
bind -n C-M-h send C-h
bind -n C-M-l send C-l

# fallback for weird situations
bind -r Up select-pane -U
bind -r Down select-pane -D
bind -r Left select-pane -L
bind -r Right select-pane -R

bind \\ last-pane
bind Tab last-window

# SWAPPING

bind -r S-Down swap-pane -D
bind -r S-Up swap-pane -U
bind -r S-Left swap-pane -U
bind -r S-Right swap-pane -D

# COPY PASTA

bind c copy-mode
bind P paste-buffer

bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi Y send -X copy-end-of-line
bind -T copy-mode-vi v send -X begin-selection

bind -T copy-mode-vi i send -X cancel
bind -T copy-mode-vi I send -X cancel
bind -T copy-mode-vi a send -X cancel
bind -T copy-mode-vi A send -X cancel
bind -T copy-mode-vi c send -X cancel
bind -T copy-mode-vi C send -X cancel

bind -T copy-mode-vi O send-keys -X pipe-and-cancel "xargs xdg-open"

# üêÅ MOUSES üêÄ

# turn mouse on
bind m set -g mouse on \; display "Mouse: ON"
# turn mouse off
bind M set -g mouse off \; display "Mouse: OFF"

# CONTEXT

bind e split-window -hb -l 40 "lf -command togglePreview"
bind E split-window -hbfd -l 40 "lf -command togglePreview"

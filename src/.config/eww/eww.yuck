(defvar mode "NORMAL")
(defvar scratch "[]")
(defvar window "{}")
(defvar workspace "{}")
(defvar workspaces "[]")

(defvar debug "")

; TODO: stream
; TODO: mouse events
(defpoll volume
  :interval "1s"
  `echo "$(ponymix get-volume)% $(ponymix is-muted && echo [muted] || echo)"`)
; TODO: make cfg output structured data?
(defpoll mic
  :interval "1s"
  "ponymix --source is-muted && echo [nomic] || echo")

(defpoll vpn
  :interval "60s"
  "nu -l -c 'cu vpn status | get --ignore-errors state | default null'")

; TODO: indicate active workspace on inactive monitor
(defwidget workspaces [monitor]
  (box
    (for ws in workspaces
      (button
        :visible {ws.monitor == monitor.name}
        :class `ws ${ws.id == workspace.id ? "current" : ""}`
        :tooltip `${ws.lastwindowtitle}`
        :onclick `hyprctl dispatch workspace ${ws.name}`
        `${ws.id}: ${ws.name}`))))

(defwidget bar [monitor]
  (eventbox
    :cursor "pointer"
    :onscroll `hyprctl dispatch focusmonitor ${monitor.name}; ~/bin/hyprmon change workspace ${monitor.name} {}`
    :onclick `hyprctl dispatch focusmonitor ${monitor.name}`
    :dragvalue "top"
    :dragtype "text"
    :ondropped "notify-send dropped {}"
    (centerbox
      (workspaces :monitor monitor)
      (label
        :width `${monitor.width / monitor.scale / 2}`
        :limit-width 128
        :text `${window.title ?: ""}`)
      (box
        (eventbox
          :ondropped "notify-send dropped {}"
          "here")
        `üóì ${formattime(EWW_TIME, "%Y-%m-%d")}`
        `‚è≤ ${formattime(EWW_TIME, "%H:%M:%S")}`
        (button
          :class `scratch ${(arraylength(scratch) > 0) ? "active" : ""}`
          :onclick `hyprctl dispatch togglespecialworkspace scratch`
          :onrightclick `hyprctl dispatch workspace name:games`
          :onmiddleclick `hyprctl dispatch workspace name:void`
          "scratch")))))

(deflisten media
  :initial ""
  `playerctl --follow metadata --format {{title}}`)

(defwidget info [monitor]
  (eventbox
    :dragvalue "bottom"
    :dragtype "text"
    (centerbox
      (box
        (label
          :class `${mode != "NORMAL" ? "abnormal" : ""}`
          :text mode)
        "VOL ${volume} ${mic}"
        `üåê ${vpn}`
        (eos))
      (label
        :width `${monitor.width / monitor.scale / 2}`
        :text media)
      (box
        "CPU ${round(EWW_CPU.avg, 0)}%"
        "RAM ${round(EWW_RAM.used_mem_perc, 0)}%"
        (box :visible {EWW_BATTERY != ""}
          {EWW_BATTERY == ""
           ? ``
           : `${EWW_BATTERY?.BAT0?.capacity}% [${EWW_BATTERY?.BAT0?.status}]`})
        (systray
          :class "horizontal systray")))))

; windows

(defwindow top [monitor]
  :exclusive true
  :stacking "bg"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "16px"
                      :anchor "top center")
  (bar :monitor monitor))

(defwindow bottom [monitor]
  :exclusive true
  :stacking "bg"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "16px"
                      :anchor "bottom center")
  (info :monitor monitor))

(defwindow debug []
  :stacking "bottom"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "200px"
                      :height "16px"
                      :anchor "top right")
  (box
    (image :path "/home/ross/dev/src/ermak/data/kle/ermak.png")
    (image :path "/home/ross/dev/src/ermak/data/kle/ermak-controller.png")))

(defpoll eos
  :initial "{}"
  :interval "60s"
  `nu -l -c 'eos | to json -r'`)
(defwidget eos []
  (combo-box-text
    ; TODO: get list from `eos states`
    :items `[off, free, focus, busy]`
    :onchange `nu -l -c 'eos {}'`
    `eos:${eos.state}`))

[user]
	name = Ross Hadden
	email = rosshadden@gmail.com

[core]
	autocrlf = input
	editor = $EDITOR
	pager = command -v diff-so-fancy >/dev/null && diff-so-fancy | less --tabs=4 -RFX || less

[push]
	default = simple

[grep]
	extendRegexp = true
	lineNumber = true

[rerere]
	enabled = true

[diff]
	tool = diffconflicts

[difftool "diffconflicts"]
	cmd = diffconflicts $EDITOR $BASE $LOCAL $REMOTE $MERGED
	trustExitCode = true

[merge]
	tool = diffconflicts

[mergetool]
	keepBackup = false

[mergetool "diffconflicts"]
	cmd = diffconflicts $EDITOR $BASE $LOCAL $REMOTE $MERGED
	trustExitCode = true

[color]
	status = always
	diff = always

[color "branch"]
	current = red reverse
	local = blue
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[filter "noise-xml"]
	smudge = sed \"/\\(setting\\|pref\\) name='\\(last_event_timestamp_\\\\w\\+\\|signedon\\|signedoff\\|last_*seen\\|lastsaid\\|buddy_icon\\|icon_checksum\\|x\\|y\\|width\\|height\\)'/d\"
	clean = sed \"/\\(setting\\|pref\\) name='\\(last_event_timestamp_\\\\w\\+\\|signedon\\|signedoff\\|last_*seen\\|lastsaid\\|buddy_icon\\|icon_checksum\\|x\\|y\\|width\\|height\\)'/d\"

[alias]
	# SHORTHAND

	a = add
	b = branch
	c = commit
	cl = clone --recursive
	co = checkout
	d = diff
	f = fetch -p --tags --all --jobs=4
	i = !git in
	m = merge
	mt = mergetool
	o = !git out
	of = !git out-force
	op = !git please
	r = remote
	rb = rebase
	s = status -sb
	t = tag

	# SYNCING

	in = !sh -c 'git pull ${1-origin} ${2-$(git pwd)}' -
	out = !sh -c 'git push ${1-origin} ${2-$(git pwd)}' -
	out-force = !sh -c 'git push -f ${1-origin} ${2-$(git pwd)}' -
	io = !git in && git out
	please = push --force-with-lease
	sync-submodules = submodule update --init --remote --recursive

	# PLURALITY

	tags = !git tag -l | sort -V
	branches = !sh -c 'git branch | cut -c 3-'
	branches-remote = !sh -c 'git branch -r | cut -c 3- | tail -n+2'
	branches-merged = !sh -c 'git branch --merged | cut -c 3-'
	branches-unmerged = !sh -c 'git branch --no-merged | cut -c 3-'
	remotes = !sh -c 'git remote -v | sed \"0~2d\"' -
	submodules = !git submodule status | gawk '{ print ($2 " " $3) }' | column -t

	# UNIX METAPHORS

	# list file names
	find = ls-files
	# list files
	ls = ls-files
	lsa = ls-files -co --exclude-standard
	# list directories
	ls-dirs = ls-tree -d --name-only HEAD
	# list untracked files
	untracked = ls-files --others --ignored --exclude-from=.gitignore
	# checkout branch, making a new one if not present
	cd = !sh -c 'git checkout $1 2> /dev/null || git checkout -b $1' -
	# get current ref
	pwd = rev-parse --abbrev-ref HEAD
	cwd = rev-parse --short HEAD
	# get recent commits on a file
	tail = log --patch
	# make dir and add `.gitkeep`
	mkdir = "!sh -c 'mkdir -p $1; touch $1/.gitkeep; git add $1' -"
	man = help
	cat = show
	cp = cherry-pick

	# STATE

	# scrap all changed (tracked) files
	scrap = !sh -c 'git reset --hard ${1-HEAD}'
	# reset to remote branch
	burn = !sh -c 'git reset --hard ${1-origin}/$(git pwd)'
	# unstage file
	unstage = reset HEAD --

	# UTILITIES

	amend = commit --amend -C HEAD
	# track file
	track = update-index --no-assume-unchanged
	# untrack file
	untrack = update-index --assume-unchanged
	# remote URL
	url = !echo -n $(git remote -v | head -1 | gawk '{ print $2 }')
	web = !git url | sed 's_com:_com/_' | sed 's_git@__' | sed 's_\\.git$__'
	# show current branch commits
	sb = !ls .git/refs/remotes/*/$(git pwd) | cut -d/ -f4,5 | xargs git show-branch $(git pwd)
	# delete local branches that are already merged into HEAD
	shear = !git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d
	# list conflicted files
	conflicts = !git s | grep 'UU' | awk '{ print $2 }'
	# open mergetool to a chosen conflicted file
	mc = !git mergetool $(git conflicts | fzf)

	# DIFFING

	dw = diff --word-diff
	staged = diff --staged --word-diff

	# SEARCHING

	ag = grep -I --ignore-case --line-number --heading --break
	pt = grep -I --ignore-case --line-number --heading --break

	# STASHING

	sl = stash list
	ss = stash save
	sa = !sh -c 'git stash apply stash@{${1-0}}' -
	sp = !sh -c 'git stash pop stash@{${1-0}}' -
	sd = !sh -c 'git stash drop stash@{${1-0}}' -

	# LOGGING

	lg = log --graph --abbrev-commit --date=relative -n64 --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
	lgs = !git lg --stat
	new = !git lg HEAD..FETCH_HEAD
	news = !git lgs HEAD..FETCH_HEAD
	report = log --reverse --author=Ross --no-merges --format=format:\"%s%n    %b\"
	report-new = !sh -c 'git --no-pager log --reverse --author=Ross --no-merges --format=format:"%s%n    %b" origin/$(git pwd)..$(git pwd)' -

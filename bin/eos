#!/usr/bin/env nu

const api = "http://hass.lan:8123/api"

def request [endpoint: string, payload?: record] {
	let headers = [ Authorization $"Bearer ($env.HASS_API_KEY?)" ]
	let res = if $payload == null {
		http get -H $headers $"($api)($endpoint)"
	} else {
		http post -t application/json -H $headers $"($api)($endpoint)" $payload
	}
	$res | to json -r | eww update $"eos=($in)"
	$res
}

def "get window" [addr: string] {
	hyprctl clients -j
	| from json
	| where address == $"0x($addr)"
	| get -i 0
	| default {}
}

def process [
	line: string
	addr?
] {
	let event = $line | parse "{type}>>{data}" | first
	let data = $event.data | split row ','
	match $event.type {
		openwindow => {
			print $event $data
			if ($addr != null or $data.2 != "Zoom") { return $addr }
			sleep 2sec

			let window = get window $data.0
			if ($window == {}) { return $addr }

			if ($window.title == "Zoom Meeting") {
				print $window
				eos busy | print $in
				return $window.address
			}
		}
		closewindow => {
			echo $addr $data
			if ($addr == $data.0) {
				eos free | print $in
				return null
			}
		}
	}
	return $addr
}

export def states []: nothing -> list {
	[ off free focus busy ]
}

export def main [
	state?: string@states
	--format (-f): string
] {
	const entity = "select.eos_status"
	mut res = null

	if $state == null {
		return (request $"/states/($entity)" | match $format {
			json => { $in | to json -r }
			_ => {}
		})
	}

	if not ($state in [off free focus busy]) {
		error make { msg: "invalid state" }
	}

	request $"/states/($entity)" {
		state: $state
	} | match $format {
		json => { $in | to json -r }
		nuon => { $in | to nuon }
		_ => {}
	}
}

export def led [
	color?: string
	--format (-f): string
] {
	const entity = "light.eos_rgb_led"
	mut res = null

	if $color == null {
		return (request $"/states/($entity)" | match $format {
			json => { $in | to json -r }
			_ => {}
		})
	}

	request $"/services/light/turn_on" {
		entity_id: $entity
		color_name: $color
	} | match $format {
		json => { $in | to json -r }
		_ => {}
	}
}

export def socket []: nothing -> string {
	$"UNIX:($env | get -i XDG_RUNTIME_DIR | default tmp)/hypr/($env.HYPRLAND_INSTANCE_SIGNATURE)/.socket2.sock"
}

# Set state based on entering and exiting zoom meetings.
export def listen [] {
	if not ("HYPRLAND_INSTANCE_SIGNATURE" in $env) {
		load-env {
			HYPRLAND_INSTANCE_SIGNATURE: (hyprctl instances -j | from json | get 0.instance)
		}
	}
	socat -u (socket) -
	| lines -s
	| reduce -f null {|line, addr|
		process $line $addr
	}
}

# proxy

# export def "main led" [
# 	color?: string
# 	--format (-f): string
# ] {
# 	led $color --format $format
# }

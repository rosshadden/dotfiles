#!/usr/bin/env nu

const api = "http://10.0.0.20:8123/api"

def request [endpoint: string, payload?: record] {
	if $payload == null {
		http get -H [Authorization $"Bearer (cat ~/Documents/certs/ha.cert)"] $"($api)($endpoint)"
	} else {
		http post -t application/json -H [Authorization $"Bearer (cat ~/Documents/certs/ha.cert)"] $"($api)($endpoint)" $payload
	}
}

def process [
	line: string
	addr?
] {
	let event = $line | parse "{type}>>{data}" | first
	let data = $event.data | split row ','
	match $event.type {
		openwindow => {
			if ($addr == null and $data.2 == "Zoom" and ($data.3 == "Zoom" or $data.3 == "Zoom Meeting")) {
				let res = eos busy
				print $res
				$res | to json -r | eww update $"eos=($in)"
				return $data.0
			}
		},
		closewindow => {
			if ($addr == $data.0) {
				let res = eos free
				print $res
				$res | to json -r | eww update $"eos=($in)"
				return null
			}
		}
	}
	return $addr
}

export def main [
	state?: string, # off | free | focus | busy
	--format (-f): string
] {
	const entity = "select.eos_status"
	mut res = null

	if $state == null {
		return (request $"/states/($entity)" | match $format {
			json => { $in | to json -r },
			_ => {},
		})
	}

	if not ($state in [off free focus busy]) {
		error make { msg: "invalid state" }
	}

	request $"/states/($entity)" {
		state: $state,
	} | match $format {
		json => { $in | to json -r },
		nuon => { $in | to nuon },
		_ => {},
	}
}

export def led [
	color?: string,
	--format (-f): string
] {
	const entity = "light.eos_rgb_led"
	mut res = null

	if $color == null {
		return (request $"/states/($entity)" | match $format {
			json => { $in | to json -r },
			_ => {},
		})
	}

	request $"/services/light/turn_on" {
		entity_id: $entity,
		color_name: $color,
	} | match $format {
		json => { $in | to json -r },
		_ => {},
	}
}

# Set state based on entering and exiting zoom meetings.
export def listen [] {
	socat -u $"UNIX:/tmp/hypr/($env.HYPRLAND_INSTANCE_SIGNATURE)/.socket2.sock" -
	| lines -s
	| reduce -f null {|line, addr|
		process $line $addr
	}
}

# proxy

# export def "main led" [
# 	color?: string,
# 	--format (-f): string
# ] {
# 	led $color --format $format
# }

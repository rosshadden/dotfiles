#!/usr/bin/env nu

def "refresh workspaces" [] {
	hyprctl workspaces -j
	| from json
	| where name !~ :scratch
	| sort-by id
	| to json --raw
	| update workspaces $in

	hyprctl activeworkspace -j
	| update workspace $in
}

def "refresh window" [event: record] {
	hyprctl clients -j
	| from json
	| where address == $"0x($event.data)"
	| get -i 0
	| default {}
	| to json --raw
	| update window $in
}

def process [line: string] {
	let event = $line | parse "{type}>>{data}" | first
	match $event.type {
		monitoradded | monitorremoved => {
			sleep 2sec
			bars
		},
		activewindowv2 => {
			refresh window $event
		},
		createworkspace => {
			match $event.data {
				"0" => { "lab" },
				"1" => { "web" },
				"2" => { "dev" },
				"3" => { "remote" },
				"4" => { "hack" },
				"5" => { "lit" },
				"6" => { "media" },
				"7" => { "music" },
				"8" => { "monitor" },
				"9" => { "files" },
				"10" => { "chat" },
				"11" => { "design" },
				"12" => { "games" },
				_ => { "" },
			} | hyprctl dispatch renameworkspace $event.data $in
		},
		workspace | createworkspace | destroyworkspace | renameworkspace | focusedmon => {
			refresh workspaces
		},
		submap => {
			update mode (if $event.data == "" { "NORMAL" } else { $event.data })
		},
		urgent => {
			let address = $"0x($event.data)"
			let title = (hyprctl clients -j | from json | where address == $address | get 0.title)
			notify-send -A "focus=Focus" urgent $title
			| str trim
			| match $in {
				"focus" => {
					hyprctl dispatch focuswindow $"address:($address)"
				},
			}
		},
	}
}

def update [key: string, value: string] {
	eww update $"($key)=($value)"
}

def init [] {
	refresh workspaces
	hyprctl activewindow -j | update window $in
	update mode NORMAL
}


def main [] {}

export def listen [] {
	if not ("HYPRLAND_INSTANCE_SIGNATURE" in $env) {
		load-env {
			HYPRLAND_INSTANCE_SIGNATURE: (hyprctl instances -j | from json | get 0.instance)
		}
	}
	init
	socat -u $"UNIX:($env.XDG_RUNTIME_DIR)/hypr/($env.HYPRLAND_INSTANCE_SIGNATURE)/.socket2.sock" -
	| lines -s
	| each {|line|
		process $line
		null
	}
}

export def "change workspace" [monitor: string, direction: string] {
	let current = hyprctl activeworkspace -j
	| from json
	| get id

	let workspaces = hyprctl workspaces -j
	| from json
	| where name !~ :scratch and monitor == $monitor
	| sort-by id

	match $direction {
		up => {
			if ($workspaces | where id < $current | is-empty | not $in) {
				hyprctl dispatch workspace m-1
			}
		},
		down => {
			if ($workspaces | where id > $current | is-empty | not $in) {
				hyprctl dispatch workspace m+1
			}
		},
	}
}

# proxy

export def "main listen" [] {
	listen
}

export def "main change workspace" [monitor: string, direction: string] {
	change workspace $monitor $direction
}

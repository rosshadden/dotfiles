#!/usr/bin/env nu

def "refresh workspaces" [] {
	hyprctl workspaces -j
	| from json
	| where name !~ special:
	| sort-by id
	| to json --raw
	| update workspaces $in

	hyprctl workspaces -j
	| from json
	| where name == special:scratch
	| to json --raw
	| update scratch $in

	hyprctl activeworkspace -j
	| update workspace $in
}

def "refresh window" [event: record] {
	hyprctl clients -j
	| from json
	| where address == $"0x($event.data)"
	| get -i 0
	| default {}
	| to json --raw
	| update window $in
}

def process [line: string] {
	let event = $line | parse "{type}>>{data}" | first
	match $event.type {
		monitoradded | monitorremoved => {
			sleep 2sec
			bars
		}
		activewindowv2 => {
			refresh window $event
		}
		createworkspace => {
			match $event.data {
				"1" => { "web" }
				"2" => { "dev" }
				"3" => { "remote" }
				"4" => { "hack" }
				"5" => { "lit" }
				"6" => { "media" }
				"7" => { "music" }
				"8" => { "monitor" }
				"9" => { "files" }
				"10" => { "chat" }
				"11" => { "lab" }
				"12" => { "games" }
				_ => { "" }
			} | hyprctl dispatch renameworkspace $event.data $in
		}
		workspace | createworkspace | destroyworkspace | renameworkspace | moveworkspace | focusedmon | activespecial => {
			refresh workspaces
		}
		submap => {
			update mode (if $event.data == "" { "NORMAL" } else { $event.data })
		}
		urgent => {
			let address = $"0x($event.data)"
			let title = hyprctl clients -j | from json | where address == $address | get -i 0.title | default ""
			update urgent ({ active: true, address: $address, title: $title } | to json --raw)
			sleep 20sec
			update urgent "{}"
		}
	}
}

def update [key: string, value: string = ""] {
	eww update $"($key)=($value)"
}

def init [] {
	refresh workspaces
	hyprctl activewindow -j | update window $in
	update mode NORMAL
}


export def socket [
	--write (-w) # whether to get the writable socket
]: nothing -> string {
	let file = if $write { ".socket.sock" } else { ".socket2.sock" }
	$"UNIX:($env | get -i XDG_RUNTIME_DIR | default tmp)/hypr/($env.HYPRLAND_INSTANCE_SIGNATURE)/($file)"
}

export def _listen [
	fn: closure
] {
	if not ("HYPRLAND_INSTANCE_SIGNATURE" in $env) {
		load-env {
			HYPRLAND_INSTANCE_SIGNATURE: (hyprctl instances -j | from json | get 0.instance)
		}
	}
	init
	socat -u (socket) -
	| lines -s
	| each {|line|
		do $fn $line
		null
	}
}

export def listen [] {
	_listen {|line| process $line }
}

export def zoom [] {
	let tmp = (mktemp -t hyprmon-zoom-XXX)
	touch $tmp

	_listen {|line|
		let event = $line | parse "{type}>>{data}" | first

		match $event.type {
			openwindow => {
				let data = $event.data | split column , addr ws class title | first
				if $data.class == "Zoom Workplace" and $data.title in [ Meeting Webinar ] {
					$data.addr | save -f $tmp
					print "zoom started"
					notify-send zoom "meeting started"
					eos busy
				}
			}
			closewindow => {
				open $tmp
				| if $event.data == $in {
					"" | save -f $tmp
					print "zoom ended"
					notify-send zoom "meeting ended"
					eos free
				}
			}
		}
	}
}

export def debug [] {
	_listen {|line| print $line }
}

export def action [
	action: string
	...args: string
] {
	match $action {
		change-workspace => { change-workspace $args.0 $args.1 }
		movefocus => { movefocus $args.0 }
	}
}

def "change-workspace" [monitor: string, direction: string] {
	let current = hyprctl activeworkspace -j
	| from json
	| get id

	let workspaces = hyprctl workspaces -j
	| from json
	| where name !~ special: and monitor == $monitor
	| sort-by id

	match $direction {
		up => {
			if ($workspaces | where id < $current | is-empty | not $in) {
				hyprctl dispatch workspace m-1
			}
		}
		down => {
			if ($workspaces | where id > $current | is-empty | not $in) {
				hyprctl dispatch workspace m+1
			}
		}
	}
}

def "movefocus" [direction: string] {
	let old_window = hyprctl activewindow -j | from json | get address
	hyprctl dispatch hy3:movefocus $direction
	let new_window = hyprctl activewindow -j | from json | get address
	if $old_window == $new_window {
		hyprctl dispatch movefocus $direction
	}
}

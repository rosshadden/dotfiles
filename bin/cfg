#!/usr/bin/env bash

################################
# Get/set config settings
#
# dependencies:
# - ponymix
# - xbacklight
# - synclient
################################

# TODO: normalize settings (vol -> volume, etc.)
# TODO: refactor using better organization than nested conditionals

setting="$1"
value="$2"

modules=( volume brightness battery ip touchpad dpi )

# recursively call itself
cfg() {
	$0 "$@"
}

isCommand() {
	command -v "$1" >/dev/null 2>&1
}

checkEnabled() {
	if ! isCommand "$1"; then
		echo "mode disabled ($1 not found)"
		exit 0
	fi
}

normalizeValue() {
	local value=$1

	[[ $value == "!" ]] && local value="toggle"

	echo $value
}

value=$(normalizeValue $value)

if [[ ! $setting ]]; then
	# Output all settings
	for module in "${modules[@]}"; do
		echo "$module:"
		cfg "$module"
		echo
	done
elif [[ $setting == "volume" ]]; then
	checkEnabled ponymix

	if [[ ! $value ]]; then
		ponymix get-volume
		exit 0
	fi

	[[ $value == "on" ]] && value="unmute"
	[[ $value == "off" ]] && value="mute"

	if [[ ${value:0:1} == "+" ]]; then
		ponymix increase ${value:1}
	elif [[ ${value:0:1} == "-" ]]; then
		ponymix decrease ${value:1}
	elif [[ "toggle mute unmute" =~ $value ]]; then
		ponymix toggle
	else
		ponymix set-volume $value
	fi
elif [[ $setting == "mic" ]]; then
	checkEnabled ponymix

	if [[ ! $value ]]; then
		ponymix -t source get-volume
		exit 0
	fi

	[[ $value == "on" ]] && value="unmute"
	[[ $value == "off" ]] && value="mute"

	if [[ ${value:0:1} == "+" ]]; then
		ponymix -t source increase ${value:1}
	elif [[ ${value:0:1} == "-" ]]; then
		ponymix -t source decrease ${value:1}
	elif [[ "toggle mute unmute" =~ $value ]]; then
		ponymix -t source toggle
	else
		ponymix -t source set-volume $value
	fi
elif [[ $setting == "brightness" ]]; then
	if isCommand xbacklight; then
		if [[ ! $value ]]; then
			xbacklight -get
			exit 0
		fi

		if [[ ${value:0:1} == "+" ]]; then
			xbacklight -inc ${value:1}
		elif [[ ${value:0:1} == "-" ]]; then
			xbacklight -dec ${value:1}
		else
			xbacklight -set $value
		fi
	elif isCommand brightnessctl; then
		if [[ ! $value ]]; then
			brightness_current="$(brightnessctl get)"
			brightness_max="$(brightnessctl max)"
			echo $(lua -e "print(100 * $brightness_current // $brightness_max)")
			exit 0
		fi

		if [[ ${value:0:1} == "+" ]]; then
			brightnessctl set "${value:1}%+"
		elif [[ ${value:0:1} == "-" ]]; then
			brightnessctl set "${value:1}%-"
		else
			brightnessctl set "${value}%"
		fi
	else
		echo "mode disabled"
		exit 0
	fi
elif [[ $setting == "battery" ]]; then
	checkEnabled acpi
	charge=$(acpi | sed -n "s/Battery [0-9]:.*, \([0-9]\{1,3\}\)%.*/\1/p")
	status=$(acpi | sed -n "s/Battery [0-9]: \([A-Z]\).*, .*/\1/p")
	paste <(echo "$charge") <(echo "$status")
elif [[ $setting == "ip" ]]; then
	checkEnabled ip
	if [[ $value ]]; then
		# Add wildcard to end to simplify api
		value="$value*"
		# Expand wildcard interfaces
		netPath=/sys/class/net
		interfacePath="$netPath/$value"
		value=${interfacePath#$netPath/}
	fi
	ips=$(ip addr show $value | rg "\d+(\.\d+){3} .*global" | awk '{ print $2 }' | sed -E "s;/[0-9]+;;")
	if [[ $value ]]; then
		ips=$(echo "$ips" | awk '{ print $2 }')
	fi
	echo "$ips"
elif [[ $setting == "touchpad" ]]; then
	checkEnabled synclient

	if [[ ! $value ]]; then
		synclient -l | grep "TouchpadOff .*=.*0"
		exit 0
	fi

	if [[ $value == "toggle" ]]; then
		if [[ $(synclient -l | grep "TouchpadOff .*=.*0") ]]; then
			cfg touchpad "off"
		else
			cfg touchpad "on"
		fi
	elif [[ $value == "on" ]]; then
		synclient TouchpadOff=0;
	elif [[ $value == "off" ]]; then
		synclient TouchpadOff=1;
	fi
elif [[ $setting == "dpi" ]]; then
	dpi=$(xrdb -query | grep dpi | awk '{ print $2 }');

	if [[ ! $value ]]; then
		echo "$dpi"
		exit 0
	fi

	# TODO: use [real arguments](http://www.bahmanm.com/blogs/command-line-options-how-to-parse-in-bash-using-getopt)
	# TODO: trim trailing decimals
	if [[ $value == "--scale" ]]; then
		echo "$dpi / 96" | bc -l
	fi
else
	echo "$setting is not (yet?) supported"
fi

#!/usr/bin/env bash

function error() {
	echo "$1" 1>&2
	exit 1
}

##
# Run a given command for each item in a given list.
# If a list is piped to the function, uses this instead of the list of files in the current directory.
#
# Dependencies:
# - [parallel](https://www.gnu.org/software/parallel/)
#
# @method for-in
# @param {Command} cmd - The command to run
#   It uses the `parallel` spec.
# @param {Array} [...list=*] - The list to use
#   May be globs or space-separated values.
##
function for-in() {
	local headers=false
	local options=""
	local dry=false

	local spec=":hj:nsS"
	while getopts $spec opt; do
		case "$opt" in
			h) headers=true ;;
			j) options="-j$OPTARG" ;;
			n) dry=true ;;
			s) options="-j1" ;;
			S) echo $spec; exit ;;
			:) error "Option '-$OPTARG' requires an argument" ;;
			*) error "Invalid option: -$OPTARG" ;;
		esac
	done
	shift $((OPTIND - 1))

	local cmd="$1"
	shift
	local args=( "$@" )
	local len="${#args[@]}"
	local list=( * )

	if [ "$headers" = true ]; then
		local section='\\n################\\n# {1}\\n################'
		cmd="echo -e $section; $cmd"
	fi

	if [[ $len -gt 0 ]]; then
		list=( "${args[@]}" )
	fi

	if [ "$dry" = true ]; then
		cmd="echo $cmd"
	fi

	if [ "$options" != "" ]; then
		parallel "$options" "$cmd" ::: "${list[@]}"
	else
		parallel "$cmd" ::: "${list[@]}"
	fi
}

hasPipe() {
	stdin="$(ls -l /proc/self/fd/0)"
	stdin="${stdin/*-> /}"
	if [[ "$stdin" =~ /dev/pts ]]; then return 1; fi
}

if hasPipe; then
	for-in "$@" $(cat -)
else
	for-in "$@"
fi
